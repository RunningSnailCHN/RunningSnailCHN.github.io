<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MYSQL视图介绍</title>
      <link href="/2020/04/15/SQL%E8%A7%86%E5%9B%BE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/04/15/SQL%E8%A7%86%E5%9B%BE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="视图的概念"><a href="#视图的概念" class="headerlink" title="视图的概念"></a>视图的概念</h1><ul><li>视图是一种虚拟的表，具有和物理表相同的功能。</li><li>视图通常是有一个表或者多个表的行或列的子集。</li><li>可以对视图进行增，改，查，操作</li><li>对视图的修改不影响基本表</li><li>相比多表查询，它使得获取数据更容易</li></ul><h1 id="视图的优点"><a href="#视图的优点" class="headerlink" title="视图的优点"></a>视图的优点</h1><ul><li>视图能够简化用户的操作，用户完全不需要关心后面对应的表的结构、关联条件和筛选条件</li><li>视图使用户能以多种角度看待同一数据</li><li>视图为数据库提供了一定程度的逻辑独立性</li><li>视图能够对机密数据提供安全保护，用户只能访问被允许查询的结果集</li><li>视图的结构确定后，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响</li></ul><h1 id="视图的操作"><a href="#视图的操作" class="headerlink" title="视图的操作"></a>视图的操作</h1><h2 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h2><p>基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE [OR REPLACE] </span><br><span class="line">　　[ALGORITHM &#x3D; &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]  </span><br><span class="line">　　[DEFINER &#x3D; &#123; user | CURRENT_USER &#125;]  </span><br><span class="line">　　[SQL SECURITY &#123; DEFINER | INVOKER &#125;]</span><br><span class="line">    VIEW view_name [(column_list)]</span><br><span class="line">    AS select_statement</span><br><span class="line">   [WITH [CASCADED | LOCAL] CHECK OPTION]</span><br></pre></td></tr></table></figure><br>释义：</p><ol><li><p>OR REPLACE：表示替换已有视图</p></li><li><p>ALGORITHM选项：选择在处理定义视图的select语句中使用的方法</p></li></ol><ul><li>UNDEFINED：MySQL将自动选择所要使用的算法</li><li>MERGE：将视图的语句与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分</li><li>TEMPTABLE：将视图的结果存入临时表，然后使用临时表执行语句</li><li>缺省ALGORITHM选项等同于ALGORITHM = UNDEFINED</li></ul><ol><li>DEFINER选项：指出谁是视图的创建者或定义者</li></ol><ul><li>definer= ‘用户名’@’登录主机’</li><li>如果不指定该选项，则创建视图的用户就是定义者，指定关键字CURRENT_USER(当前用户)和不指定该选项效果相同</li></ul><ol><li>SQL SECURITY选项：要查询一个视图，首先必须要具有对视图的select权限。</li></ol><ul><li>SQL SECURITY DEFINER：定义(创建)视图的用户必须对视图所访问的表具有select权限，也就是说将来其他用户访问表的时候以定义者的身份，此时其他用户并没有访问权限。</li><li>SQL SECURITY INVOKER：访问视图的用户必须对视图所访问的表具有select权限。</li><li>缺省SQL SECURITY选项等同于SQL SECURITY DEFINER　</li></ul><ol><li><p>select_statement：表示select语句</p></li><li><p>[WITH [CASCADED | LOCAL] CHECK OPTION]：对视图所做的DML操作的结果，不能违反视图的WHERE条件的限制,保证更新视图是在该视图的权限范围之内。</p></li></ol><ul><li><p>cascade是默认值，表示更新视图的时候，要满足检查所有的视图和表的相关条件</p></li><li><p>local表示更新视图的时候，只检查将要更新的视图本身,对嵌套视图(定义在另一个视图的上面的视图)不检查其底层的视图　</p></li></ul><blockquote><p>建议：推荐使用 WHIT [CASCADED|LOCAL] CHECK OPTION选项，可以保证数据的安全性 </p></blockquote><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><ul><li>使用<code>SHOW CREATE VIEW view_name;</code> 查看视图定义</li><li>像一个普通表那样使用 SELECT 查询视图内容</li><li>有关视图的信息记录在information_schema数据库中的views表中<br><code>select * from information_schema.views  where TABLE_NAME=view_name;</code></li></ul><h2 id="视图的更改"><a href="#视图的更改" class="headerlink" title="视图的更改"></a>视图的更改</h2><ul><li>CREATE OR REPLACE VIEW语句修改视图定义</li><li>ALTER语句修改视图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ALTER</span><br><span class="line">    [ALGORITHM &#x3D; &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]</span><br><span class="line">    [DEFINER &#x3D; &#123; user | CURRENT_USER &#125;]</span><br><span class="line">    [SQL SECURITY &#123; DEFINER | INVOKER &#125;]</span><br><span class="line">VIEW view_name [(column_list)]</span><br><span class="line">AS select_statement</span><br><span class="line">    [WITH [CASCADED | LOCAL] CHECK OPTION]</span><br></pre></td></tr></table></figure></li><li>更新视图中数据 （DML操作）<br>因为视图本身没有数据，对视图进行的数据操作最终都体现在基表（用来创建视图的表叫做基表）中，但是，并不是所有的视图都可以做DML操作。</li></ul><p>下面情形中不能做DML操作：</p><ul><li>select子句中包含distinct</li><li>select子句中包含组函数</li><li>select语句中包含group by子句</li><li>select语句中包含order by子句</li><li>select语句中包含union 、union all等集合运算符</li><li>where子句中包含相关子查询</li><li>from子句中包含多个表</li><li>如果视图中有计算列，则不能更新</li><li>如果基表中有某个具有非空约束的列未出现在视图定义中，则不能做insert操作</li></ul><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p>　删除视图时，只能删除视图的定义，不会删除数据，也就是说不动基表。<br>使用drop 删除视图，语法和删除表类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW [IF EXISTS]   </span><br><span class="line">view_name [, view_name] ...</span><br></pre></td></tr></table></figure><hr><END>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2020/04/11/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/04/11/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>在任何一组东西中，最重 要的只占其中一小部分，约20%，其余80%尽管是多数，却是次要的，这就是大家所知道的<strong> 二八原则 </strong>，换句话说：可以用最少的时间和精力学习到最核心的知识，即用20%的时间和精力来做到80%的效果，这也是这篇文章的初衷。本文将总结出MySQL中最常用的知识，以此达到快速学习的目的。MySQL是一个实用性工具，学习的最好方式是<strong>实践，实践，实践</strong>。</p><hr><p>本文主要分为下面几部分：</p><ul><li>数据库中涉及到的基本概念</li><li>MySql安装与连接及工具</li><li>数据操作</li><li>索引的简单介绍</li></ul><h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>按照数据结构来组织、存储和管理数据的仓库，可以理解为一个文件夹或者是仓库，里面存放各种有结构的数据<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2></li><li>某种特定类型数据的结构化列表，类似于EXCEL中的表格<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2></li><li>关于数据库或表的描述信息，如表包含哪些列，每列的数据是数字还是文本等<h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2></li><li>表中的一个字段。所有表都是由一个或多个列组成的，同一列数据类型相同<h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2></li><li>表中的一个记录，MySQL 中以行的形式存储数据<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2></li><li>表中能够唯一标识每一行数据的的一列或多列，如登记学生的信息，学生都有唯一的学号，这个学号就可以设置为主键，当然也可以用身份证号<h1 id="2-MySql的安装与工具"><a href="#2-MySql的安装与工具" class="headerlink" title="2 MySql的安装与工具"></a>2 MySql的安装与工具</h1><h2 id="MySql的安装"><a href="#MySql的安装" class="headerlink" title="MySql的安装"></a>MySql的安装</h2></li><li><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql下载地址</a><br>访问上述下载地址，根据自己的操作系统选择对应的安装包，目前最新的版本已经到了8.0，但是现在好多公司还是使用5.7左右的版本，因此也说明了版本不是越新越好的。</li></ul><h2 id="连接工具"><a href="#连接工具" class="headerlink" title="连接工具"></a>连接工具</h2><p>安装mysql后，连接数据库有多种方法：</p><ul><li>命令行连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mysql -h 127.0.0.1 -u root -p</span><br><span class="line">-- 使用root用户登录到本地3306端口上的数据库，也可以登录远程的，只要把-h 后面地址改成远程ip即可</span><br></pre></td></tr></table></figure></li><li>使用工具连接<br>主要图形化工具有</li></ul><ul><li><a href="https://sqlyog.en.softonic.com/" target="_blank" rel="noopener">sqlyog</a></li><li><a href="http://www.navicat.com.cn/store/navicat-premium" target="_blank" rel="noopener">navicat</a></li></ul><p>两个都是可以通过图形界面的形式访问数据库。可根据个人使用喜好选择。</p><h1 id="3-SQL-语法"><a href="#3-SQL-语法" class="headerlink" title="3 SQL 语法"></a>3 SQL 语法</h1><p>SQL 用于访问和处理数据库的标准的计算机语言，主要操作包括对数据库，表及表中记录的 增删改查（CRUD）。在我们新安装的数据库系统中，只有系统库，需要新建数据库才能进行后续操作，所以先学习数据库 的CRUD操作。</p><h2 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h2><ul><li>增    <code>create database db_name;</code></li><li>删   <code>drop database db_name;</code></li><li>改  <code>RENAME DATABASE db_name TO new_db_name</code></li><li>查 <code>show databases;</code><br>以上是数据库所有的命令，很简单吧，需要注意的是 SQL 命令是不区分大小写的，一般习惯 sql支持的命令名称 用大写，其他自定义名称用小写，<code>;</code> 表示 一条命令的结束，命令行时要查询哪个数据库下的表有两种方式，一是用 <code>use db_name;</code> 切到对应数据库下，以后的操作就是针对这个数据库下的操作，二是可以使用<code>db_name.table_name</code> 的全限定的方式查询对应表。</li></ul><h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><p>表的操作也有CRUD，不过稍微复杂一点。</p><ul><li>查  <code>show tables;</code></li><li>删   <code>drop table table_name;</code></li><li>改  <code>alter table old_table_name rename to new_table_name</code></li><li>增  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">(</span><br><span class="line">column1 datatype [NULL|NOT NULL] [CONSTRAINTS],</span><br><span class="line">column2 datatype [NULL|NOT NULL] [CONSTRAINTS],</span><br><span class="line">...,</span><br><span class="line">primary key(column1 )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p> 注， [ ] 表示这一项可写可不写。</p></blockquote></li></ul><p>举个例子，建一个名称为 <strong>student</strong> 的表，有<strong>姓名 name，年龄 age，性别sex</strong>三列，建表语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">  &#96;name&#96; varchar(30) CHARACTER SET utf8 NOT NULL,</span><br><span class="line">  &#96;age&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;sex&#96; char(1) CHARACTER SET utf8 NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;name&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ;</span><br></pre></td></tr></table></figure></p><h2 id="表中记录的操作"><a href="#表中记录的操作" class="headerlink" title="表中记录的操作"></a>表中记录的操作</h2><h2 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 insert"></a>插入 insert</h2><p>为了能进行实操，先学习如何插入记录到表中，上面的例子中已经新建了表student，假设插入如下数据到表中</p><div class="table-container"><table><thead><tr><th>姓名</th><th>年龄</th><th>性别</th></tr></thead><tbody><tr><td>张三</td><td>20</td><td>男</td></tr><tr><td>李四</td><td>18</td><td>男</td></tr><tr><td>王五</td><td>16</td><td>男</td></tr><tr><td>韩梅梅</td><td>14</td><td>女</td></tr><tr><td>李雷</td><td>14</td><td>男</td></tr></tbody></table></div><p>插入语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student(name,age,sex) VALUES(&#39;张三&#39;,20,&#39;男&#39;);</span><br><span class="line">INSERT INTO student(name,age,sex) VALUES(&#39;李四&#39;,18,&#39;男&#39;);</span><br><span class="line">INSERT INTO student(name,age,sex) VALUES(&#39;王五&#39;,16,&#39;男&#39;);</span><br><span class="line">INSERT INTO student(name,age,sex) VALUES(&#39;韩梅梅&#39;,14,&#39;女&#39;);</span><br><span class="line">INSERT INTO student(name,age,sex) VALUES(&#39;李雷&#39;,14,&#39;男&#39;);</span><br></pre></td></tr></table></figure><br>这样我们就得到了5条数据,也可以指定部分列进行插入，后面的值要和列对应。可以看出向表中插入数据的基本格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (column1,column2,column3,...)</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br><span class="line">&#x2F;&#x2F; 如果插入所有字段，table_name 后面的列可以省略。</span><br></pre></td></tr></table></figure></p><p>特别的，可以从别的表中查询插入，如向student2（和student表结构一致） 表插入数据年龄大于15的学生（关于如何查询下章介绍），SQL如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student2 </span><br><span class="line">SELECT name,age,sex </span><br><span class="line">FROM student</span><br><span class="line">WHERE age &gt; 15;</span><br><span class="line">&#x2F;&#x2F; 语句形式为：Insert into Table2(字段1,字段2</span><br><span class="line">,...) select 字段1,字段2,... from Table1；</span><br></pre></td></tr></table></figure></p><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>从表中查询需要的数据又称为检索，支持查询，去重，排序，分组，统计等操作。</p><h2 id="单列，多列，所有列的检索"><a href="#单列，多列，所有列的检索" class="headerlink" title="单列，多列，所有列的检索"></a>单列，多列，所有列的检索</h2><p>语法格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT col1[,col2,col3...] FROM table_name;</span><br><span class="line">或：</span><br><span class="line">SELECT *  FROM table_name;</span><br></pre></td></tr></table></figure><br>上面一条语句可以选择表中的一列或者多列进行展示，而第二条语句则进行所有列展示，可用于不知道表中字段情况查询。</p><h2 id="去重-distinct"><a href="#去重-distinct" class="headerlink" title="去重 distinct"></a>去重 distinct</h2><ul><li>distinct 作用于所有的列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT col1[,col2,col3...] FROM table_name;</span><br></pre></td></tr></table></figure><h2 id="限制结果-limit"><a href="#限制结果-limit" class="headerlink" title="限制结果 limit"></a>限制结果 limit</h2><p>有时不需要展示太多条数据，可以使用limit进行限制，语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT  col1[,col2,col3...] </span><br><span class="line">FROM table_name</span><br><span class="line">LIMIT n[,m];</span><br></pre></td></tr></table></figure><br>limit 后面可带一个数字，表示取几条数据，也可以用逗号隔开的两条数据，表示从第n条开始取，取m条数据。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释主要用来备注说明，或者有时候忽略掉不需要的语句，主要有两种方式： </p><ul><li>行内注释 — 或# </li><li>多行注释 /<em> </em>/<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 这是行注释, 注意-- 后面是要有一个空格的</span><br><span class="line"># 这也是行注释</span><br><span class="line">SELECT * FROM table_name ...;</span><br><span class="line">...</span><br><span class="line">&#x2F;*</span><br><span class="line">这是多行注释，可以换行</span><br><span class="line">*&#x2F;</span><br><span class="line">SQL语句...</span><br></pre></td></tr></table></figure><h2 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序 order by"></a>排序 order by</h2>如果需要对查询结果进行排序（升序或者降序），可以使用order by 子句,order by子句一定是select的最后一条子句，其还有如下特点：</li><li>后可加 多列</li><li>可按照列位置排序 即order by 1,2（1，2 表示select 后字段位置序号）</li><li>可按非选择列排序，即不在select 后展示的列</li><li>默认升序asc， 倒序用desc</li></ul><h2 id="条件过滤-where"><a href="#条件过滤-where" class="headerlink" title="条件过滤 where"></a>条件过滤 where</h2><p>当需要按照条件进行筛选数据时，可用where 子句，where子句一般跟在表名之后，</p><ul><li>支持的操作符有： + ,&lt;&gt; ,！= ,&lt;, &lt;=, &gt;, &gt;= ,BETWEEN … AND …,IS NULL,IS NOT NULL， 注意，IS NULL 不能用 = NULL 去判断</li><li>逻辑操作符 AND OR </li><li>逻辑操作符优先级</li><li>通配符过滤  like<ul><li>% 表示 任何字符出现任何次数，但不会匹配NULL</li><li>_ 只匹配单个字符</li><li>[] 指定一个字符集，匹配指定位置的一个字符，可使用<sup><a href="#fn_ " id="reffn_ "> </a></sup> 来否定</li></ul></li></ul><h2 id="字段的计算"><a href="#字段的计算" class="headerlink" title="字段的计算"></a>字段的计算</h2><p>有时需要对多列字段进行组合或者一些计算以达到目的，主要支持的计算有：</p><ul><li>字段拼接 concate函数</li><li>去前后空格 trim</li><li>字段别名（或叫导出列） As</li><li>算术运算 +-*/</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是辅助字段计算的方式，一般给定一定个数输入，函数会输出一个值，主要可以分为以下几类，</p><ul><li><p>文本处理函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CONCAT(str1, str2, ...)：拼接字符串</span><br><span class="line">CONCAT_WS(separator, str1, str2, ...)：使用指定分隔符连接字符串</span><br><span class="line">LEFT(str, length)：从左截取指定长度的子字符串</span><br><span class="line">RIGHT(str, length)：从右截取指定长度的子字符串</span><br><span class="line">SUBSTRING(str, index, length)：从指定位置处开始截取指定长度的子字符串</span><br><span class="line">LENGTH(str)：返回字符串的长度</span><br><span class="line">LOWER(str)：将字符串转换为小写格式</span><br><span class="line">UPPER(str)：将字符串转换为大写格式</span><br><span class="line">LTRIM(str)：去除字符串左侧的空格</span><br><span class="line">RTRIM(str)：去除字符串右侧的空格</span><br><span class="line">TRIM(str)：去除字符串两侧的空格</span><br><span class="line">FORMAT(X, D)：按照指定的小数位数D将数值X转化为字符串</span><br><span class="line">LPAD(str, length, padStr)：在字符串左侧用padStr将原字符串填充至指定长度，当指定长度小于原字符串长度时，截断原字符串</span><br><span class="line">RPAD(str, length, padStr)：在字符串右侧用padStr将原字符串填充至指定长度，当指定长度小于原字符串长度时，截断原字符串</span><br><span class="line">REPLACE(str, from_str, to_str)：将字符串中的所有匹配的字符串替换为新字符串</span><br><span class="line">REVERSE(str)：将字符串逆序输出</span><br></pre></td></tr></table></figure></li><li><p>日期和时间处理函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NOW()：返回当前的时间和日期</span><br><span class="line">CURDATE()：返回当前的日期</span><br><span class="line">CURTIME()：返回当前时间</span><br><span class="line">DATE(dateAndTime)：提取日期时间表达式中的日期部分</span><br><span class="line">DAY()：返回日期时间表达式中的天数部分</span><br><span class="line">YEAR()：返回日期时间表达式中的年部分</span><br><span class="line">EXTRACT(unit FROM date)：按照指定的时间单位从日期时间表达式中提取年、月、日、时间等部分</span><br><span class="line">DATE_FORMAT(date, format)：按照指定格式显示时间日期</span><br><span class="line">DATE_ADD(date, INTERVAL exp unit)、DATE_SUB(date, INTERVAL exp unit)：日期和时间的加减操作。返回值是否包含时间取决于给定的时间日期的表达式和时间单位。</span><br><span class="line">DATEDIFF(date1, date2)：返回两个日期的差值，会忽略表达式中的时间，仅对日期进行运算</span><br><span class="line">ADDDATE(date, INTERVAL exp unit)：等同于DATE_ADD()</span><br><span class="line">ADDDATE(date, days)：在给定的日期上加上给定的天数</span><br><span class="line">ADDTIME(time1, time2)：将两个时间表达式相加</span><br></pre></td></tr></table></figure><ul><li>数值处理函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ABS() 返回一个数的绝对值</span><br><span class="line">COS() 返回一个角度的余弦</span><br><span class="line">EXP() 返回一个数的指数值</span><br><span class="line">PI() 返回圆周率</span><br><span class="line">SIN() 返回一个角度的正弦</span><br><span class="line">SQRT() 返回一个数的平方根</span><br><span class="line">TAN() 返回一个角度的正切</span><br></pre></td></tr></table></figure><h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><ul><li>聚集函数：对某些行运行的函数，计算并返回一个值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AVG() 返回某列的平均值</span><br><span class="line">COUNT() 返回某列的行数,使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。</span><br><span class="line">使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值</span><br><span class="line">MAX() 返回某列的最大值</span><br><span class="line">MIN() 返回某列的最小值</span><br><span class="line">SUM() 返回某列值之和</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2><p>分组即根据一列或者几列，将一个数据集划分成若干个“子集”，然后针对若干个“子集”进行数据处理</p><ul><li>分组是使用SELECT语句的GROUP BY子句建立的</li><li>在非分组的列（即非group by 后面的列）上可以使用 COUNT, SUM, AVG,等函数</li><li>过滤分组 having，支持所有WHERE操作符<br>语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, function1(col1[,col2...])[, function2(col3,col4...)]</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">GROUP BY column_name</span><br></pre></td></tr></table></figure></li></ul><h2 id="SELECT子句顺序"><a href="#SELECT子句顺序" class="headerlink" title="SELECT子句顺序"></a>SELECT子句顺序</h2><div class="table-container"><table><thead><tr><th>子　　句</th><th>说　　明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>要返回的列或表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>仅在从表选择数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组说明</td><td>仅在按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>输出排序顺序</td><td>否</td></tr></tbody></table></div><h2 id="修改-update"><a href="#修改-update" class="headerlink" title="修改 update"></a>修改 update</h2><ul><li><code>UPDATE table_name SET field = new_val[, field = new_val] [ WHERE condition1 [and condition2]]</code></li></ul><h2 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h2><ul><li><code>DELETE FROM table_name WHERE condition1 [and condition2]</code></li><li>全表内容删除 <code>DELETE FROM table_name</code> or <code>TRUNCATE TABLE table_name</code></li></ul><h2 id="组合与连接-union-join"><a href="#组合与连接-union-join" class="headerlink" title="组合与连接  union / join"></a>组合与连接  union / join</h2><h2 id="组合-UNION-UNION-ALL"><a href="#组合-UNION-UNION-ALL" class="headerlink" title="组合 UNION /UNION ALL"></a>组合 UNION /UNION ALL</h2><p>UNION/UNION ALL 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。UNION多个 SELECT 语句会删除重复的数据，而UNION ALL多个 SELECT 语句不会删除重复的数据。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure></p><h2 id="连接JOIN"><a href="#连接JOIN" class="headerlink" title="连接JOIN"></a>连接JOIN</h2><p>前面主要是在一张表中读取数据，但是在真正的应用中经常需要从多个数据表中读取数据。本节介绍多表关联连接操作JOIN。在 SELECT, UPDATE 和 DELETE 语句中都可使用 JOIN 来联合多表查询。<br>JOIN 按照功能大致分为如下三类：</p><ul><li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li><li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li><li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。<br>语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT col1,col2 ... </span><br><span class="line">FROM table1 </span><br><span class="line">INNER|LEFT|RIGHT JOIN table2 </span><br><span class="line">ON condition1[,condition2,...]</span><br></pre></td></tr></table></figure><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><img src="https://upload-images.jianshu.io/upload_images/3744481-5562a7b9047aa7c1.gif?imageMogr2/auto-orient/strip" alt="img_innerjoin.gif"><br>INNER JOIN,内连接,或等值连接,主要产生同时符合table1和table2的一组数据</li></ul><h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><p><img src="https://upload-images.jianshu.io/upload_images/3744481-814e9f647b2ef100.gif?imageMogr2/auto-orient/strip" alt="img_leftjoin.gif"><br> LEFT JOIN左连接以左表table1为主表，即以主表产生一套完整的记录,去右表中匹配的记录 .如果没有匹配到,则置为null</p><h2 id="RIGTH-JOIN"><a href="#RIGTH-JOIN" class="headerlink" title="RIGTH JOIN"></a>RIGTH JOIN</h2><p><img src="https://upload-images.jianshu.io/upload_images/3744481-f300ddf787619c5c.gif?imageMogr2/auto-orient/strip" alt="img_rightjoin.gif"><br>RIGTH JOIN右连接和 LEFT JOIN 正好相反，以右表table2为主表，即以右表产生一套完整的记录,去左表中匹配的记录 .如果没有匹配到,则置为null。如果把 LEFT JOIN 中table1和table2互换位置，则结果等价于 RIGTH JOIN。</p><h1 id="4-MySQL索引操作"><a href="#4-MySQL索引操作" class="headerlink" title="4 MySQL索引操作"></a>4 MySQL索引操作</h1><p>索引的知识可以写成一本书，这里只简单介绍一部分。索引是一种特殊的文件，它们包含着对数据表里所有记录的引用指针。更通俗的说，数据库索引好比是一本书的目录，能加快数据库的查询速度。</p><h2 id="直接创建索引"><a href="#直接创建索引" class="headerlink" title="直接创建索引"></a>直接创建索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE] INDEX index_name ON table_name(column1(length)[,column2(length),...]) ;</span><br></pre></td></tr></table></figure><h2 id="修改表结构的方式添加索引"><a href="#修改表结构的方式添加索引" class="headerlink" title="修改表结构的方式添加索引"></a>修改表结构的方式添加索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [UNIQUE] INDEX index_name ON (column1(length)[,column2(length),...]);</span><br></pre></td></tr></table></figure><h2 id="创建表的时候同时创建索引"><a href="#创建表的时候同时创建索引" class="headerlink" title="创建表的时候同时创建索引"></a>创建表的时候同时创建索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;table_name&#96; (</span><br><span class="line"></span><br><span class="line">&#96;id&#96; int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line"></span><br><span class="line">&#96;name&#96; varchar(50)  NOT NULL ,</span><br><span class="line"></span><br><span class="line">&#96;sex&#96; char(3) NULL ,</span><br><span class="line"></span><br><span class="line">&#96;age&#96; int(11) NULL DEFAULT NULL ,</span><br><span class="line"></span><br><span class="line">PRIMARY KEY (&#96;id&#96;),</span><br><span class="line"></span><br><span class="line">[UNIQUE] INDEX index_name (name(length))</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure><h1 id="帮助文档使用"><a href="#帮助文档使用" class="headerlink" title="帮助文档使用"></a>帮助文档使用</h1><p>在 MySQL 使用过程中，可能经常会遇到以下问题：</p><ul><li>某个操作语法突然忘记了</li><li>当前版本上，都支持哪些函数？</li><li>当前版本上，是否支持某个功能？</li></ul><p>当然我们可能想到查找 MySQL 的文档。但是却要耗费大量的时间和精力。 所以对于以上问题，最好的解决办法是使用 MySQL 安装后自带的帮助文档，在遇到问题时可以方便快捷地进行查询</p><h2 id="按照层次看帮助"><a href="#按照层次看帮助" class="headerlink" title="按照层次看帮助"></a>按照层次看帮助</h2><p>如果不知道帮助能够提供些什么，可以用<code>？contents</code> 或者 <code>help contents</code>命令来显示所有可供查询的的分类,然后对于列出的分类，可以使用<code>help 类别名称</code>的方式针对用户感兴趣的内容做进一步的查看。</p><h2 id="快速查阅帮助"><a href="#快速查阅帮助" class="headerlink" title="快速查阅帮助"></a>快速查阅帮助</h2><p>在实际应用当中，如果需要快速查阅某项语法时，可以使用关键字进行快速查询。例如，想知道 show 命令都能看些什么东西，可以用如下命令：<code>? show</code> 或 <code>help show</code></p><p>又如，想查看 CREATE TABLE 的语法，可以使用以下命令:<br><code>? CREATE TABLE</code> 或 <code>help CREATE TABLE</code></p><h2 id="常用的网络资源"><a href="#常用的网络资源" class="headerlink" title="常用的网络资源"></a>常用的网络资源</h2><p><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a> 是 MySQL 的官方网站，可以下载到各个版本的 MySQL 以及相关客户端开发工具等,提供了目前最权威的 MySQL 数据库及工具的在线手册。</p><hr><p>至此已经把MySQL 中基础部分总结完成，后续文章将总结MYSQL一些其他特性，如视图，存储过程，触发器，事务，游标，索引原理，性能优化等</p><hr><p>&lt;<strong>END</strong>&gt;</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
